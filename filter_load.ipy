if __name__ == '__main__':
    import numpy as np

# bzr1.dat x2 for flux

# Define filter values from Bessel's paper. These values are 1000 larger to remove the decimal points for ease of
# typing. The rescale is done in the filter generation function
gflux = np.asarray(
    [0, 3, 6, 78, 301, 506, 612, 676, 716, 753, 784, 813, 839, 856, 876, 896, 918, 939, 953, 971, 981, 990, 995,
     1000, 997, 988, 980, 960, 937, 908, 874, 828, 775, 719, 658, 594, 524, 460, 391, 329, 271, 219, 173, 135, 103,
     77, 57, 42, 31, 20, 14, 12, 7, 5, 0])
rflux = np.asarray(
    [0, 2, 8, 12, 21, 34, 51, 70, 97, 141, 218, 354, 572, 772, 951, 932, 953, 962, 926, 943, 947, 937, 946, 947,
     927, 919, 898, 895, 926, 945, 966, 974, 947, 970, 1000, 928, 907, 986, 990, 923, 858, 782, 849, 631, 210, 93,
     71, 52, 17, 6, 0])
iflux = np.asarray(
    [0, 1, 3, 15, 87, 262, 480, 633, 707, 777, 851, 934, 980, 993, 1000, 936, 709, 716, 917, 959, 945, 934, 927,
     923, 931, 929, 902, 826, 784, 733, 643, 565, 576, 734, 554, 123, 28, 9, 4, 2, 0])
zflux = np.asarray(
    [0, 8, 19, 46, 102, 203, 347, 502, 653, 782, 876, 935, 979, 995, 1000, 982, 946, 845, 773, 764, 719, 699, 708,
     661, 493, 348, 361, 350, 341, 350, 368, 407, 432, 424, 402, 378, 355, 334, 312, 291, 270, 250, 225, 203, 181,
     159, 134, 112, 91, 48, 0])
uflux = np.asarray([0, 3, 23, 86, 204, 366, 537, 695, 826, 923, 985, 992, 937, 805, 595, 332, 113, 15, 0])
vflux = np.asarray([0, 9, 121, 370, 648, 879, 1000, 996, 873, 664, 421, 234, 107, 39, 15, 0])


# Create the filter with specified wavelength and flux as per the table
# The wavelength gap is 50 per entry in flux
# 0.001 to rescale the fluxes
def filter_gen(start_wave, flux):
    wave = np.asarray([start_wave + i * 50 for i in range(0, len(flux))])
    band_filter = [np.asarray(wave), 0.001 * np.asarray(flux)]
    return band_filter


# Create each filter with the starting wavelength set from Bessel's paper
filter_u = filter_gen(3000, uflux)
filter_v = filter_gen(3500, vflux)
filter_g = filter_gen(4000, gflux)
filter_r = filter_gen(4800, rflux)
filter_i = filter_gen(6800, iflux)
filter_z = filter_gen(8100, zflux)

# Group up the filters
# 3 index [colour][0wave,1flux][elements] immutable tuple
all_filter = (filter_u, filter_v, filter_g, filter_r, filter_i, filter_z)

# Define the filter ranges
# Set to be other way around so that redshift range is ascending order mutable list so beware
filter_flux_range = [[all_filter[i][0][-1], all_filter[i][0][0]] for i in range(0, len(all_filter))]


def filtershow():
    if __name__ == '__main__':
        import matplotlib.pyplot as plt
    thick = 0.7
    plt.figure("SkyMapper_Filters", dpi=120, figsize=(7, 3))
    plt.plot(filter_g[0], filter_g[1], "green", lw=thick)
    plt.plot(filter_r[0], filter_r[1], "red", lw=thick)
    plt.plot(filter_i[0], filter_i[1], "firebrick", lw=thick)
    plt.plot(filter_z[0], filter_z[1], "black", lw=thick)
    plt.plot(filter_u[0], filter_u[1], "purple", lw=thick)
    plt.plot(filter_v[0], filter_v[1], "blue", lw=thick)
    plt.xlabel('Wavelength (Angstroms)')
    plt.ylabel('Normalised flux pass')
    plt.tight_layout()
    plt.show()
